<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  
  <!-- Bootstrap CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

  <!-- Bootstrap JS -->
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <!-- Charts -->
  <script src="https://cdn.plot.ly/plotly-latest.min.js"></script>

  <!-- Leaflet -->
  <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
  <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
  
  <title>Elasticsearch Dashboard</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      margin: 20px;
      padding: 20px;
      background-color: #f4f4f4;
    }

    #dashboard-container {
      display: flex;
    }

    #map-container {
      flex: 1;
      margin-right: 20px;
    }

    #map {
      height: 400px; 
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
   
    #top-locations {
      flex: 1;
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    #document-distribution {
      flex: 1;
      background-color: #fff;
      padding: 20px;
      margin-left: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    #results-container {
      flex: 1;
      background-color: #fff;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
      margin-left: 30px;
      
    }
    .results-list {
    list-style: none;
    padding: 0;
  }

  .result-item {
    margin-bottom: 10px;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 5px;
  }

  .no-results {
    color: #888;
  }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th, td {
      padding: 12px;
      text-align: left;
      border-bottom: 1px solid #ddd;
    }

    th {
      background-color: #f2f2f2;
    }
  </style>
</head>


<body>
     
      <div class="container">
        <h1 class="mt-4">Elasticsearch Dashboard</h1>
        <div id="dashboard-container" class="mt-4">
          <div id="map-container">
            <h2>Map</h2>
            <div id="map"></div>
          </div>
          <div id="results-container">
            <h2 id="rsults-h2" style="font-size: 16px;"">Results</h2>
            <div id="results">
            <!-- Include  results content here -->
            <!-- ... -->
        </div>
          </div>
        </div>
      </div>

      <div id="dashboard-container" class="mt-4">
        
        <div id="top-locations">
          <h2>Top Mentioned Locations</h2>
          <table class="table">
            <thead>
              <tr>
                <th>Location</th>
                <th>Coordinates</th>
                <th>Counts</th>
              </tr>
            </thead>
            <tbody>
              <% if (topGeoreferences) { %>
                <% topGeoreferences.forEach(locationBucket => { %>
                  <% const location = locationBucket.key; %>
                  <% const hits = locationBucket.top_coordinates.hits.hits; %>
                  <% hits.forEach(hit => { %>
                    <% const source = hit._source; %>
                    <% const coordinates = source.coordinates; %>
                    <% const count = locationBucket.doc_count; %>
                    <tr>
                      <td><%= location %></td>
                      <td><%= coordinates ? `Lat: ${coordinates.lat}, Lon: ${coordinates.lon}` : 'Coordinates not available' %></td>
                      <td><%= count %></td>
                    </tr>
                  <% }); %>
                <% }); %>
              <% } else { %>
                <tr>
                  <td colspan="3">No top locations available</td>
                </tr>
              <% } %>
            </tbody>
          </table>
        </div>
        
        <div id="document-distribution">
          <h2>Document Distribution Over Time</h2>
          <div id="barChart"></div>
          <script>
            // Extract data from the server-side rendering
            const documentsOverTime = <%- JSON.stringify(documentsOverTime) %>;
        
            // Extract date labels and document counts from the data
            const labels = documentsOverTime.map(entry => entry.key_as_string);
            const data = documentsOverTime.map(entry => entry.doc_count);
        
            // Create a Plotly bar chart
            Plotly.newPlot('barChart', [{
              x: labels,
              y: data,
              type: 'bar',
              marker: {color: 'rgb(75, 192, 192)'}
            }], {
              xaxis: {
                title: 'Date',
                type: 'category'
              },
              yaxis: {
                title: 'Document Count'
              },
              margin: { t: 20 }
            });
          </script>
        </div>
        
        <!-- Modal -->
<div class="modal fade" id="documentModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="exampleModalLabel">Document Details</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body" id="modalBody">
          <!-- Content for the modal goes here -->
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>
        
        
        <script>
            // Initialize Leaflet map
            const map = L.map('map').setView([0, 0], 2);
            console.log('Leaflet map initialized');
          
            // Add OpenStreetMap as the base layer
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
              attribution: 'Â© OpenStreetMap contributors'
            }).addTo(map);
          
            // Add a click event listener to the map
            map.on('click', function (e) {
              const clickedCoordinates = e.latlng;
              console.log('Clicked Coordinates:', clickedCoordinates);
          
              // Send the coordinates to the backend for further processing
              fetch('/process-coordinates', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify({ coordinates: clickedCoordinates })
              })
              .then(response => response.json())
              .then(data => {
                console.log("success");
                // Handle the response from the server
                console.log('Server Response:', data);
                

                // Update the results container with the received data
                const results_h2 = document.getElementById('rsults-h2');
                results_h2.textContent = `Results for Coordinates: ${clickedCoordinates.lat}, ${clickedCoordinates.lng}`;
                const resultsContainer = document.getElementById('results');
                resultsContainer.innerHTML = ''; // Clear previous content
                console.log(data.hits);
          
                // Display the results in the container
                if (data.hits && data.hits.length > 0) {
                  var ul = document.createElement('ul');
                  ul.classList.add('results-list'); // Add a class for styling
          
                  data.hits.forEach(hit => {
                    var li = document.createElement('li');
                    li.classList.add('result-item'); // Add a class for styling
          
                    li.innerHTML = `<strong>Title:</strong> ${hit.title}`;
                    ul.appendChild(li);
                  });
          
                  resultsContainer.appendChild(ul);
           // Attach click event listener to the ul
  ul.addEventListener('click', function (e) {
    // Check if the clicked element is a title
    if (e.target.tagName === 'STRONG') {
      // Extract the title from the clicked element
      const title = e.target.nextSibling.textContent.trim();

      // Find the corresponding document in the stored hits
      const selectedDocument = data.hits.filter(hit => hit.title === title);
      console.log("DATA",selectedDocument)
      // Open the modal and set the title
      const modal = new bootstrap.Modal(document.getElementById('documentModal'));
      modal.show();
      document.getElementById('exampleModalLabel').innerText = `${title}`;

      // Display additional details in the modal body
      const modalBody = document.getElementById('modalBody');
      
      modalBody.innerHTML = `
        <ul>
          <li><strong>Authors:</strong> ${selectedDocument[0].authors}</li>
          <li><strong>Date:</strong> ${selectedDocument[0].date}</li>
          <li><strong>Georeferences:</strong> ${JSON.stringify(selectedDocument[0].georeferences)}</li>
          <li><strong>Temporal Expressions:</strong> ${JSON.stringify(selectedDocument[0].temporal_expressions)}</li>
          <li><strong>Geopoint Author:</strong> ${JSON.stringify(selectedDocument[0].geopoint_author)}</li>
          <li><strong>Body:</strong> ${selectedDocument[0].body}</li>

        </ul>`;
    }
  });

                } else {
                  resultsContainer.innerHTML = '<p class="no-results">No documents available</p>';
                }
              })
              .catch(error => {
                console.error('Error:', error);
              });
            });
          </script>
        <script>
          // Handle the click event on a title
          document.getElementById('document-distribution').addEventListener('click', function (e) {
            // Check if the clicked element is a title
            if (e.target.tagName === 'LI') {
              // Extract the title from the clicked element
              const title = e.target.innerText.split(':')[1].trim();
              // Open the modal and set the title
              const modal = new bootstrap.Modal(document.getElementById('documentModal'));
              modal.show();
              document.getElementById('exampleModalLabel').innerText = `Document Details - ${title}`;
            }
          });
        </script>
      </div>
    </div>
  </body>
      
    
</html>
